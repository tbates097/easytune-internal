var $thisFreq, $logMin, $logMax, $logSpacing, $thisTransientTime, $servoRate, $sampleTime, $thisExcitationAmplitude, $temp as real
var $loopCounter, $numSamples as integer
var $filename as string
var $fileLog as handle
var $invalidAxis as axis

library function GatherFrequencyResponse($myAxis as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer)
	GatherFrequencyResponse($myAxis, $minFreq, $maxFreq, $numFreqs, $excitationAmplitude, $measurementType, 10, "FRD", "FRD_Info")
end

library function GatherFrequencyResponse($myAxis as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer, $numCycles as real)
	GatherFrequencyResponse($myAxis, $minFreq, $maxFreq, $numFreqs, $excitationAmplitude, $measurementType, $numCycles, "FRD", "FRD_Info")
end

library function GatherFrequencyResponse($myAxis as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer, $numCycles as real, $dataFilePrefix as string, $InfoFilename as string)
	var $tempAx[8] as axis
	$tempAx[0] = $myAxis
	GatherFrequencyResponse($tempAx, $minFreq, $maxFreq, $numFreqs, $excitationAmplitude, $measurementType, $numCycles, $dataFilePrefix, $InfoFilename)
end

library function GatherFrequencyResponse($myAxes[8] as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer)
	GatherFrequencyResponse($myAxes, $minFreq, $maxFreq, $numFreqs, $excitationAmplitude, $measurementType, 10, "FRD", "FRD_Info")
end

library function GatherFrequencyResponse($myAxes[8] as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer, $numCycles as real)
	GatherFrequencyResponse($myAxes, $minFreq, $maxFreq, $numFreqs, $excitationAmplitude, $measurementType, $numCycles, "FRD", "FRD_Info")
end

library function GatherFrequencyResponse($myAxes[8] as axis, $minFreq as real, $maxFreq as real, $numFreqs as real, $excitationAmplitude as real, $measurementType as integer, $numCycles as real, $dataFilePrefix as string, $InfoFilename as string)
	DataCollectionStop()
	ParameterSetTaskValue(1,TaskParameter.ExecuteNumLines, 200)

	$logMin = Log10($minFreq)
	$logMax = Log10($maxFreq)
	$logSpacing = ($logMax-$logMin)/($numFreqs-1)

	// Setup the data collection ahead of time:

	// Reset the data collection configuration.
	DataCollectionReset()

	//Configure the items needed
	DataCollectionAddSystemSignal(SystemDataSignal.DataCollectionSampleTime)
	foreach var $myAxis in $myAxes
		if $myAxis == $invalidAxis
			continue
		end
		DataCollectionAddAxisSignal($myAxis,AxisDataSignal.FrequencyResponseBefore)
		DataCollectionAddAxisSignal($myAxis,AxisDataSignal.FrequencyResponseAfter)
	end
	// Figure out the data collection rate based on the lowest servo rate
	$servoRate = 10000000.0
	foreach var $myAxis in $myAxes
		if $myAxis == $invalidAxis
			continue
		end
		$temp = StatusGetAxisItem($myAxis, AxisDataSignal.ServoUpdateRate)*1000
		if $temp < $servoRate
			$servoRate = $temp
		end
	end
	
	$sampleTime = 1000.0/$servoRate
	
	//Create a file to log out filename and frequency in a CSV format
	$fileLog = FileOpenText("/FRD/"+$InfoFilename+".csv", FileMode.Overwrite)
	foreach var $myAxis in $myAxes
		if $myAxis == $invalidAxis
			continue
		end
		FileTextWriteString($fileLog,";Axis: "+AxisToString($myAxis)+"\n")
	end
	FileTextWriteString($fileLog,";StartFreq: "+RealToString($minFreq)+"\n")
	FileTextWriteString($fileLog,";EndFreq: "+RealToString($maxFreq)+"\n")
	FileTextWriteString($fileLog,";NumFreqs: "+RealToString($numFreqs)+"\n")
	FileTextWriteString($fileLog,";Amplitude: "+RealToString($excitationAmplitude)+"\n")
	FileTextWriteString($fileLog,";"+"\n")
	FileTextWriteString($fileLog,";Filename, Frequency"+"\n")

	for $loopCounter = 0 to $numFreqs-1
		$temp = $logMin + ($loopCounter * $logSpacing)
		$thisFreq = 10**($temp)
		
		if $thisFreq > 5000.0
			$thisTransientTime = 0.001
		else
			$thisTransientTime = Round(5000/$thisFreq) / 1000.0
		end
		
		$thisExcitationAmplitude = $excitationAmplitude
		if $measurementType == TuningMeasurementType.AutoFocusOpenLoop 
			//Need to scale amplitude by starting frequency
			$thisExcitationAmplitude = $excitationAmplitude * ($minFreq**2.0 / $thisFreq**2.0)
		end
		
		foreach var $myAxis in $myAxes
			if $myAxis == $invalidAxis
				continue
			end
			TuningDisturbanceMeasurementOn($myAxis, TuningDisturbanceType.Sinusoid, $measurementType, $thisExcitationAmplitude, $thisFreq)
		end
		
		TimerClear(0)
		
		//Data collection 
		$filename = "/FRD/"+$dataFilePrefix+"_"+IntegerToString($loopCounter+1)+".dat"
		
		FileTextWriteString($fileLog,$filename+","+RealToString($thisFreq, RealDisplayFormat.Decimal,16)+"\n")
				
		//Calculate the number of points at the servo rate needed to be collected
		$numSamples = Ceil($numCycles * ($servoRate / $thisFreq))
		
		//For noise, limit to greater that 100 points
		if $numSamples < 100
			$numSamples = 100
		end
		
		//Wait for the data retrieval to be done
		while (StatusGetSystemItem(SystemStatusItem.DataCollectionStatus) & DataCollectionFlags.UploadingDriveBuffers)
			Dwell(0.001)
		end
		
		//Make sure transient time has ellapsed
		while TimerRead(0, TimerMode.Standard) <= $thisTransientTime
			Dwell(0.001)
		end
		
		if $loopCounter > 0
			DataCollectionStop()
		end
		
		// Trigger the data collection
		DataCollectionStart($filename, $numSamples, $sampleTime)
		
		//Wait for the data collect to be done
		while (StatusGetSystemItem(SystemStatusItem.DataCollectionStatus) & DataCollectionFlags.Triggered)
			Dwell(0.001)
		end
		
	end

	FileClose($fileLog)
	foreach var $myAxis in $myAxes
		if $myAxis == $invalidAxis
			continue
		end
		TuningDisturbanceMeasurementOff($myAxis)
	end

	//Wait for the data retrieval to be done
	while (StatusGetSystemItem(SystemStatusItem.DataCollectionStatus) & DataCollectionFlags.UploadingDriveBuffers)
		Dwell(0.001)
	end

	DataCollectionStop()
end